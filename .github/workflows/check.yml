# This workflow runs whenever a PR is opened or updated, or a commit is pushed to main. It runs
# several checks:
# - fmt: checks that the code is formatted according to rustfmt
# - clippy: checks that the code does not contain any clippy warnings
# - doc: checks that the code can be documented without errors
# - hack: check combinations of feature flags
# - msrv: check that the msrv specified in the crate is correct
permissions:
  contents: read
# This configuration allows maintainers of this repo to create a branch and pull request based on
# the new branch. Restricting the push trigger to the main branch ensures that the PR only gets
# built once.
on:
  workflow_dispatch:
  push:
    branches: [main, dev, v*]
    paths:
      - '**.js'
      - '**.rs'
      - '**.toml'
      - '**.json'
      - 'Cargo.lock'
      - '**.css'
  pull_request:
# If new code is pushed to a PR branch, then cancel in progress workflows for that PR. Ensures that
# we don't waste CI time, and returns results quicker https://github.com/jonhoo/rust-ci-conf/pull/5
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
name: check
jobs:

  fmt:
    runs-on: ubuntu-latest
    name: ( fmt + hack ) rust stable
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install System Dependencies
        run: |
          sudo apt update && \
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev

      - name: Install toolchain stable
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt
          targets: x86_64-unknown-linux-gnu, wasm32-unknown-unknown
      - name: cargo fmt --check
        run: cargo fmt --check

      - name: Install node 20
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Install trunk ^0.18
        run: cargo install --version ^0.18 --locked --debug trunk

      - name: Install node packages
        working-directory: ./web_frontend
        run: npm ci
      # It is required to first build the frontend as the server won't
      # build if it has no access to frontend's dist directory.
      - name: Build web frontend
        run: trunk build
        working-directory: ./web_frontend

      - name: cargo install cargo-hack
        uses: taiki-e/install-action@cargo-hack
      # intentionally no target specifier; see https://github.com/jonhoo/rust-ci-conf/pull/4
      # --feature-powerset runs for every combination of features
      - name: cargo hack
        run: cargo hack --feature-powerset check

  clippy:
    runs-on: ubuntu-latest
    name: ( clippy + doc ) rust ${{ matrix.toolchain }} / node ${{ matrix.nodever }}
    permissions:
      contents: read
      checks: write
    strategy:
      fail-fast: false
      matrix:
        # Get early warning of new lints which are regularly introduced in beta channels.
        toolchain: [beta]
        nodever: [latest]
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - name: Install System Dependencies
        run: |
          sudo apt update && \
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev

      - name: Install toolchain ${{ matrix.toolchain }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.toolchain }}
          components: clippy
          targets: x86_64-unknown-linux-gnu, wasm32-unknown-unknown

      - name: Install node ${{ matrix.nodever }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodever }}

      - name: Install trunk
        run: cargo install --locked --debug trunk

      - name: Install node packages
        working-directory: ./web_frontend
        run: npm ci
      # It is required to first build the frontend as the server won't
      # build if it has no access to frontend's dist directory.
      - name: Build web frontend
        run: trunk build
        working-directory: ./web_frontend

      - name: cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features

      # - name: Install required cargo
      #   run: cargo install --locked clippy-sarif sarif-fmt

      # - name: Run rust-clippy
      #   run:
      #     cargo clippy
      #     --all-features
      #     --message-format=json | clippy-sarif | tee rust-clippy-results.sarif | sarif-fmt
      #   continue-on-error: true

      # - name: Upload analysis results to GitHub
      #   uses: github/codeql-action/upload-sarif@v3
      #   with:
      #     sarif_file: rust-clippy-results.sarif
      #     wait-for-processing: true

      - name: cargo doc
        run: cargo doc --no-deps --all-features
        env:
          RUSTDOCFLAGS: --cfg docsrs

  msrv:
    # check that we can build using the minimal rust version that is specified by this crate
    runs-on: ubuntu-latest
    # we use a matrix here just because env can't be used in job names
    # https://docs.github.com/en/actions/learn-github-actions/contexts#context-availability
    strategy:
      matrix:
        msrv: ["1.70"] # 2021 edition requires 1.56.1
        nodever: [14]
    name: ( msrv ) rust ${{ matrix.msrv }} / node ${{ matrix.nodever }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install System Dependencies
        run: |
          sudo apt update && \
          sudo apt install -y \
            libwebkit2gtk-4.0-dev \
            build-essential \
            curl \
            wget \
            file \
            libssl-dev \
            libgtk-3-dev \
            libayatana-appindicator3-dev \
            librsvg2-dev \
            libsoup2.4-dev \
            libjavascriptcoregtk-4.0-dev

      - name: Install toolchain ${{ matrix.msrv }}
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: ${{ matrix.msrv }}
          targets: x86_64-unknown-linux-gnu, wasm32-unknown-unknown

      - name: Install node ${{ matrix.nodever }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodever }}

      - name: Install trunk ^0.18
        run: cargo install --version ^0.18 --locked --debug trunk

      - name: Install node packages
        working-directory: ./web_frontend
        run: npm ci

      # It is required to first build the frontend as the server won't
      # build if it has no access to frontend's dist directory.
      - name: Build web frontend
        run: trunk build
        working-directory: ./web_frontend

      - name: cargo +${{ matrix.msrv }} check
        run: cargo check
